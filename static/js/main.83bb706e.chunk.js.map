{"version":3,"sources":["apiRequest.js","getUserRepoData.js","getLanguageStats.js","components/LanguageGraphBar.js","components/LanguageGraph.js","components/LoadingGraph.js","Stats.js","App.js","serviceWorker.js","index.js"],"names":["axiosInstance","axios","create","headers","Authorization","concat","process","get","_x","_get","apply","this","arguments","_callee","url","response","regenerator_default","a","wrap","_context","prev","next","sent","abrupt","data","t0","Error","stop","getUserRepoData","_ref","Object","asyncToGenerator","mark","username","getLanguageStats","userRepos","aggregatedLanguageSizeByName","requests","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","repo","undefined","Symbol","iterator","done","value","languages_url","fork","push","return","finish","Promise","all","then","resultsArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","dataSet","combineLanguages","err","sortedStats","keys","map","key","name","size","sort","b","oldData","newData","LanguageGraphBar","props","scale","max","barStyle","left","top","right","bottom","backgroundColor","transform","transformOrigin","statsTextStyle","amount","total","roundTo","isNaN","react_default","createElement","className","style","flexGrow","title","LanguageGraph","stats","maxLanguageSize","Array","Math","toConsumableArray","language","totalSize","reduce","accumulator","currentValue","getTotalSize","LoadingGraph","bars","i","animationDuration","random","Stats","_useState","useState","_useState2","slicedToArray","setStats","_useState3","_useState4","isLoading","setLoadingState","useEffect","_fetchData","newStats","fetchData","LoadingGraph_LoadingGraph","App","updateFromHash","hash","window","location","startsWith","slice","split","setInputValue","setUsername","_React$useState","React","_React$useState2","_React$useState3","_React$useState4","inputValue","changeUsername","inputRef","useRef","addEventListener","type","onChange","event","target","onKeyUp","e","ref","onClick","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83bb706e.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst axiosInstance = axios.create({\n    headers: {\n        Authorization: `token ${process.env.REACT_APP_GITHUB_API_TOKEN}`\n    }\n})\n\nexport async function get(url) {\n    const response = await axiosInstance.get(url)\n    try {\n        return response.data\n    } catch(error) {\n        throw new Error(error)\n    }\n}\n","import {get} from './apiRequest'\n\nexport default async (username) => {\n    const data = await get(`https://api.github.com/users/${username}/repos`)\n    return data\n}\n","import { get } from './apiRequest'\nimport getUserRepoData from './getUserRepoData'\n\n// The language statistics from the Github GraphQL API come grouped by repo.\n// This function sums up the language statistics across all the user's repos so that we can see the overall language statistics for the user.\nexport default async (username) => {\n  const userRepos = await getUserRepoData(username)\n  const aggregatedLanguageSizeByName = {}\n  const requests = []\n  for (const repo of userRepos) {\n    if (!(repo && repo.languages_url && !repo.fork)) {\n      continue\n    }\n    requests.push(get(repo.languages_url))\n  }\n  // Use Promise.all to fetch data from the different URLs in parallel.\n  return Promise.all(requests)\n    .then(resultsArray => {\n      for (const dataSet of resultsArray) {\n        combineLanguages(aggregatedLanguageSizeByName, dataSet)\n      }\n      // A key-value object was convenient for aggregating the data, but we prefer to return an array, sorted by the language size.\n      const sortedStats = Object.keys(aggregatedLanguageSizeByName).map(key => {\n        return {\n          name: key,\n          size: aggregatedLanguageSizeByName[key]\n        }\n      })\n      sortedStats.sort((a, b) => b.size - a.size)\n      return sortedStats\n    })\n}\n\n// Combine new data with the existing data.\nfunction combineLanguages(oldData, newData) {\n  for (const key in newData) {\n    if (typeof oldData[key] === 'undefined') {\n      oldData[key] = newData[key]\n    } else {\n      oldData[key] += newData[key]\n    }\n  }\n}\n","import React from 'react'\nimport roundTo from 'round-to'\n\nexport default function LanguageGraphBar(props) {\n    const scale = props.size / props.max\n    const barStyle = {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: 'lightgray',\n        transform: `scaleX(${scale})`,\n        transformOrigin: 'left center'\n    }\n    const statsTextStyle = {\n        left: 100 * scale + '%'\n    }\n    const amount = props.total ?\n        roundTo(100 * props.size / props.total, 2) + '%'\n        :\n        props.size + ' bytes'\n    return props.name && !isNaN(props.size) && (\n        <div className=\"flex flex-row mb3\">\n            <div className=\"w4 tr\">\n                <span className=\"mr2\">{props.name}</span>\n            </div>\n            <div className=\"flex-grow relative mr6\" style={{flexGrow: 1}}>\n                <div className=\"absolute bg-moon-gray\" style={barStyle} title={props.total && props.size + ' bytes'}></div>\n                <div className=\"relative ml2\" style={statsTextStyle}>\n                    <span>{amount}</span>\n                </div>\n            </div>\n        </div >\n    )\n}\n","import React from 'react'\nimport LanguageGraphBar from './LanguageGraphBar'\n\nexport default function LanguageGraph(props) {\n    const maxLanguageSize = getMaxLanguageSize(props.stats)\n    const totalSize = getTotalSize(props.stats)\n    return props.stats.map(language => {\n        return (\n            <LanguageGraphBar key={language.name} name={language.name} size={language.size} max={maxLanguageSize} total={totalSize} />\n        )\n    })\n}\n\nfunction getMaxLanguageSize(stats) {\n    if (stats instanceof Array) {\n        return Math.max(...stats.map(language => language.size))\n    } else {\n        return 0\n    }\n}\n\nfunction getTotalSize(stats) {\n    if (stats instanceof Array) {\n        const total = stats.reduce((accumulator, currentValue) => accumulator + currentValue.size, 0)\n        return total\n    } else {\n        return 0\n    }\n\n}\n","import React from 'react'\nimport './LoadingGraph.css'\n\nexport default function LoadingGraph() {\n    const bars = []\n    for (let i = 0; i < 5; i++) {\n        const style = {\n            animationDuration: (1 + Math.random(3)) + 's'\n        }\n        bars.push(<div className=\"LoadingGraphBar mb3 ml6 flex-grow relative mr6 bg-light-gray\" key={i} style={style}>&nbsp;</div>)\n    }\n    return (\n        <div>\n            {bars}\n        </div>\n    )\n}\n\n","import React, { useEffect, useState } from 'react'\nimport getLanguageStats from './getLanguageStats'\nimport LanguageGraph from './components/LanguageGraph'\nimport LoadingGraph from './components/LoadingGraph'\n\nexport default function Stats(props) {\n    const [stats, setStats] = useState()\n    const [isLoading, setLoadingState] = useState(false)\n\n    useEffect(\n        () => {\n            if (!props.username) {\n                setStats()\n                setLoadingState(false)\n                return\n            }\n            setLoadingState(true)\n            async function fetchData() {\n                const newStats = await getLanguageStats(props.username)\n                setStats(newStats)\n                setLoadingState(false)\n            }\n            fetchData()\n        },\n        [props.username]\n    )\n\n    if (isLoading) {\n        return <LoadingGraph></LoadingGraph>\n    } else if (stats instanceof Array) {\n        return <LanguageGraph stats={stats} />\n    } else {\n        return ''\n    }\n}\n","import React, { useEffect, useRef } from 'react'\nimport Stats from './Stats'\nimport './App.css';\n\nfunction App() {\n  const updateFromHash = () => {\n    let hash = window.location.hash\n    if (hash.startsWith('#')) {\n      hash = hash.slice(1)\n    }\n    if (hash.startsWith('/')) {\n      hash = hash.slice(1)\n    }\n    const split = hash.split('/')\n    if (split[0] === 'user' && typeof split[0] === 'string') {\n      const username = split[1]\n      setInputValue(username)\n      setUsername(username)\n    }\n  }\n  const [username, setUsername] = React.useState('')\n  // Keep an extra variable for the current value of the input,\n  // based on which the value passed to the Stats component updates _only_ when clicking on the button\n  const [inputValue, setInputValue] = React.useState(username)\n  const changeInputValue = (event) => {\n    setInputValue(event.target.value)\n  }\n  const changeUsername = () => {\n    window.location.hash = '/user/' + inputValue\n  }\n  const handleKey = e => {\n    if (e.key === 'Enter') {\n      changeUsername()\n    }\n  }\n  const inputRef = useRef()\n  window.addEventListener('hashchange', updateFromHash)\n  useEffect(() => {\n    updateFromHash()\n  },\n  [inputRef])\n  return (\n    <div className=\"App center mw7\">\n      <div className=\"pl6-l pr6-l\">\n        <h1>GitHub language summary</h1>\n        <p>Enter your username to generate programming language statistics about your GitHub profile.</p>\n      </div>\n      <div className=\"pl6-l pr6-l flex flex-row mb3\">\n        <input type=\"text\" value={inputValue} onChange={changeInputValue} onKeyUp={handleKey} ref={inputRef} className=\"block\"></input>\n        <button onClick={changeUsername} className=\"block\">Get</button>\n      </div>\n      <Stats username={username} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}